"""
5.6 孪生素数
问题描述
本节要研究孪生素数的问题，先来看看什么是孪生素数。
所谓孪生素数指的是间隔为2的两个相邻素数，因为它们之间的距离已经近得不能再近了，如同孪生兄弟一样，故将这一对素数称为孪生素数。
显然，最小的一对孪生素数是(1,3)。我们可以写出3～100以内的孪生素数，一共有8对，分别是(3,5)，(5,7)，(11,13)，(17,19)，(29,31)，(41,43)，(59,61)和(71,73)。
随着数字的增大，孪生素数的分布也越来越稀疏，人工寻找孪生素数变得非常困难。关于孪生素数还存在着一个著名的猜想——孪生素数猜想，即孪生素数是否有无穷多对，这是数论中还有待解决的一个重要问题。
此处我们只讨论在有限范围内的孪生素数求解问题。
本节要解决的问题：编程求出3～1000以内的所有孪生素数。
"""

not_prime_list = []
for n in range(3, 1001):
    for d in range(2, n):
        if n % d == 0:
            not_prime_list.append(n)
            break
prime_list = [x for x in range(3, 1001) if x not in not_prime_list]
print(prime_list)
twins_prime_list = [y for y in prime_list if y+2 in prime_list]
for i in twins_prime_list:
    print(i, i+2)
print(f'totally {len(twins_prime_list)} pairs')
